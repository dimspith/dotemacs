#+TITLE: My Emacs Configuration
#+AUTHOR: Dimitris Spythouris
#+STARTUP: overview
#+OPTIONS: num:nil

* Package Init
** Archives
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)

(when (not package-archive-contents)
    (ignore-errors (package-refresh-contents)))
#+END_SRC

** Use-package
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)

#+END_SRC

* Core Settings
** GC Tweak
#+begin_src emacs-lisp
;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src

** Font
The font used.
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :family "Fira Code" :height 110)
(set-face-attribute 'fixed-pitch nil :family "Fira Code" :height 110)
(set-face-attribute 'variable-pitch nil :family "Cantarell" :height 110 :weight 'regular)
#+END_SRC

** Starting Directory
Configure emacs to start in the home directory.
#+BEGIN_SRC emacs-lisp
(setq default-directory "~/")
#+END_SRC

** Scrolling
Smooth scrolling.
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(3 ((shift) . 3)))
(setq mouse-wheel-progressive-speed nil)
(setq mouse-wheel-follow-mouse 't)
(setq scroll-step 1)
#+END_SRC

** Column numbers
#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC

** Splash Screen
Skip the splash screen/message and make the scratch buffer empty.
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(setq initial-scratch-message nil)
(setq inhibit-startup-echo-message t)
#+END_SRC

** Line numbers
#+begin_src emacs-lisp
(global-linum-mode t)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                dired-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (linum-mode 0))))
#+end_src

** Bars
Turn off the scroll bar, menu bar and the tool bar.
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC

** Indentation
Default tab width is 4 and tabs are now spaces.
#+BEGIN_SRC emacs-lisp
(setq-default tab-always-indent t)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+END_SRC

** Backup Files
All backup files are saved in the ~/.emacs.d/saves directory.
Some versioning of files is used to prevent disasters.
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/saves"))
  backup-by-copying t
  version-control t
  delete-old-versions t
  kept-new-versions 20
  kept-old-versions 5
  )
#+END_SRC

** Yes/No
When emacs requires a yes/no answer make it one character.
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Visual lines
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
#+END_SRC

** Disabled Commands
Enable all disabled commands.
#+BEGIN_SRC emacs-lisp
(setq disabled-command-function nil)
#+END_SRC

** Sentences
Sentences end on a dot and one space. This is used to improve sentence
navigation with ~M-a~ and ~M-e~.
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

** Misc
#+BEGIN_SRC emacs-lisp
(use-package newcomment
  :ensure nil
  :bind
  ("C-x M-;" . comment-box))

(use-package view
  :ensure nil
  :bind ("C-v" . View-scroll-half-page-forward)
        ("M-v" . View-scroll-half-page-backward))

(use-package align
  :ensure nil
  :bind ("C-c e a a" . align)
        ("C-c e a r" . align-regexp)
        ("C-c e a s" . align-current))

(use-package emacs
  :ensure nil
  :bind
  ("C-M-<left>"  . shrink-window-horizontally)
  ("C-M-<right>" . enlarge-window-horizontally)
  ("C-M-<down>"  . shrink-window)
  ("C-M-<up>"    . enlarge-window)
  ("M-o"         . other-window)
  ("C-<tab>"     . indent-relative)
  ("<f5>"        . compile)
  ("C-<f5>"      . recompile)
  ("<C-f9>"      . set-frame-font)
  ("C-x C-b"     . ibuffer)
  ("<f7>"        . toggle-transparency)
  ("M-j"         . (lambda () (interactive) (join-line -1)))
  :config
  (setq window-divider-default-right-width 1)
  (setq window-divider-default-bottom-width 1)
  (setq window-divider-default-places 'right-only)
  :hook (after-init . window-divider-mode))
#+END_SRC

* Base Package Settings
** Eshell
#+BEGIN_SRC emacs-lisp
(use-package eshell
  :hook (eshell-mode .
    (lambda ()
      (eshell/alias "c" "clear 1")
      (eshell/alias "f" "find-file $1")
      (eshell/alias "fo" "find-file-other-window $1")
      (eshell/alias "d" "dired $1")
      (eshell/alias "ll" "ls -l")
      (eshell/alias "la" "ls -al"))))
#+END_SRC

** Re-builder
#+BEGIN_SRC emacs-lisp
(use-package re-builder
  :config
  (setq reb-re-syntax 'string))
#+END_SRC

** Flymake
#+BEGIN_SRC emacs-lisp
(use-package flymake
  :config
  (setq flymake-no-changes-timeout nil)
  (setq flymake-start-syntax-check-on-newline nil))
#+END_SRC

** Dired
Guess resulting directory on dired operations
#+BEGIN_SRC emacs-lisp
(setq dired-dwim-target t)
#+END_SRC

** Winner-mode
   Easily undo and redo window changes.
   #+BEGIN_SRC emacs-lisp
(use-package winner
  :demand
  :config
  (winner-mode 1)
  :bind
  ("C-c w u" . winner-undo)
  ("C-c w r" . winner-redo))
   #+END_SRC

** Org-mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :bind
  ("C-c o a" . org-agenda)
  ("C-c c"   . org-capture)
  ("C-c o l" . org-store-link)
  :config
  (setq org-agenda-span 14)
  (setq org-agenda-files (quote ("~/notes/schedule.org")))
  (setq org-src-window-setup 'current-window)
  (setq org-src-fontify-natively t)
  (setq org-list-allow-alphabetical t)
  (setq org-src-preserve-indentation t)
  (setq org-src-tab-acts-natively t)
  (setq org-edit-src-content-indentation 0)
  (setq org-hide-emphasis-markers t))

;; Center text when in org-mode buffers
(defun org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . org-mode-visual-fill))
#+END_SRC

** Electric
   Enable electric pair and indent mode.
   A newline between adjacent parentheses opens an extra one.
   #+BEGIN_SRC emacs-lisp
(use-package electric
  :config
  (electric-pair-mode 1)
  (electric-indent-mode 1)
  (setq electric-pair-open-newline-between-pairs t))
   #+END_SRC

** Isearch
   Make isearch search for regexes by default.
   #+BEGIN_SRC emacs-lisp
(use-package isearch
  :ensure nil
  :bind
  ("C-s" . isearch-forward-regexp))
   #+END_SRC

** Show-paren-mode
   Highlight matching parentheses.
   #+BEGIN_SRC emacs-lisp
(use-package paren
  :config
  (setq show-paren-style 'parenthesis)
  (setq show-paren-when-point-in-periphery t)
  (setq show-paren-when-point-inside-paren nil)
  (show-paren-mode 1))
   #+END_SRC

** Hippie-expand
#+BEGIN_SRC emacs-lisp
(use-package hippie-exp
  :bind
  ("M-/" . hippie-expand)
  :config
  (setq hippie-expand-try-functions-list '(try-expand-dabbrev-visible
                                           try-expand-dabbrev
                                           try-expand-dabbrev-all-buffers
                                           try-expand-dabbrev-from-kill
                                           try-complete-file-name-partially
                                           try-complete-file-name
                                           try-expand-all-abbrevs
                                           try-expand-list
                                           try-expand-line
                                           try-expand-dabbrev-from-kill
                                           try-complete-lisp-symbol-partially
                                           try-complete-lisp-symbol)))
#+END_SRC

* Other Package Settings
** doom-modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode))
#+END_SRC

** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :bind
  ("C-;" . avy-goto-char)
  ("C-M-;" . avy-goto-line))
#+END_SRC

** Xterm-color
   #+BEGIN_SRC emacs-lisp
   (use-package xterm-color
     :defer t
     :config
     (setq compilation-environment '("TERM=xterm-256color"))
     (defun my/advice-compilation-filter (f proc string)
       (funcall f proc (xterm-color-filter string)))
     (advice-add 'compilation-filter :around #'my/advice-compilation-filter))
   #+END_SRC

** Deft
#+BEGIN_SRC emacs-lisp
(use-package deft
  :defer t
  :init
  (setq deft-directory "~/notes"
        deft-extensions '("org")
        deft-use-filename-as-title t
        deft-recursive t
        deft-new-file-format "%Y-%m-%dT%H%M"))
#+END_SRC

** Zetteldeft
#+BEGIN_SRC emacs-lisp
(use-package zetteldeft
  :after deft
  :config
  (zetteldeft-set-classic-keybindings))
#+END_SRC

** Ivy, Counsel, Swiper
Enable ivy globally (replacement for ido).
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish ivy-mode
  :bind (("C-c C-r" . ivy-resume))
  :config
    (ivy-mode t)
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-count-format "(%d/%d) "))
#+END_SRC

   Enable swiper (enhanced isearch for ivy) and assign C-s to search
#+BEGIN_SRC emacs-lisp
(use-package swiper)
#+END_SRC

   Counsel is a collection of ivy enhanced base commands
   Bind some keys to common commands
#+BEGIN_SRC emacs-lisp
(use-package counsel
  ;; :config
  ;; (counsel-mode t)
  :bind (("C-x C-f"   . counsel-find-file)
         ("<f2> u"    . counsel-unicode-char)
         ("C-M-s"     . counsel-grep-or-swiper)
         ("C-c s g f" . counsel-git)
         ("C-c s d"   . counsel-dired-jump)
         ("C-c s g g" . counsel-git-grep)
         ("C-c s f"   . counsel-fzf)
         ("C-c s l"   . counsel-locate)
         ("C-x r i"   . counsel-register)
         ("M-i"       . counsel-imenu)
         ("<f9>"      . counsel-load-theme)))
#+END_SRC

** Ivy-prescient
Replacement for smex with good recents support and counsel integration
#+BEGIN_SRC emacs-lisp
(use-package ivy-prescient
  :after counsel
  :custom
  (ivy-prescient-enable-filtering nil)
  :config
  (prescient-persist-mode 1)
  (ivy-prescient-mode 1))
#+End_SRC

** Company
   Enable company with various settings
#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish
  :config
   (setq company-idle-delay 0.1)
   (setq company-minimum-prefix-length 1)
   (setq company-selection-wrap-around t)
   (setq company-tooltip-align-annotations t)
   (setq company-tooltip-limit 10)
   (setq company-dabbrev-downcase nil)
   (company-tng-configure-default))
#+END_SRC

** Flycheck
Load flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :config
  (setq flycheck-check-syntax-automatically '(save mode-enabled)))
#+END_SRC

** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :config
  (yas-global-mode)
  :bind
  ("C-'"      . yas-expand)
  ("C-c <tab>". company-yasnippet))
#+END_SRC

#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :after (yasnippet))
#+end_src

** All-the-icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
  :hook
  (dired-mode . all-the-icons-dired-mode))

(use-package all-the-icons-ivy
  :config
  (setq all-the-icons-ivy-file-commands
    '(counsel-find-file
      counsel-file-jump
      counsel-recentf
      projectile-find-file
      projectile-find-dir))
  (all-the-icons-ivy-setup)
  (ivy-set-display-transformer 'ivy-switch-buffer 'all-the-icons-ivy-buffer-transformer))
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :config
  (setq projectile-completion-system 'ivy)
  (setq projectile-tags-backend 'etags-select)
  (add-to-list 'projectile-globally-ignored-modes "org-mode")
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1))
#+END_SRC

** Eglot
#+BEGIN_SRC emacs-lisp
(use-package eglot
  :defer t
  :config
  (add-to-list 'eglot-server-programs '(haskell-mode    . ("ghcide" "--lsp")))
  (add-to-list 'eglot-server-programs '(nim-mode        . ("nimlsp")))
  (add-to-list 'eglot-server-programs '(c-mode          . ("clangd")))
  (add-to-list 'eglot-server-programs '(elixir-mode     . ("~/programs/elixir-ls/language_server.sh")))
  (add-to-list 'eglot-server-programs '(typescript-mode . ("typescript-language-server" "--stdio")))
  (add-to-list 'eglot-server-programs '(c++-mode        . ("clangd")))
  (add-to-list 'eglot-server-programs '((tex-mode context-mode texinfo-mode bibtex-mode)
                                        . ("digestif"))))
#+END_SRC

** Magit
Magit is an interface to git.
We also install magit-annex for git-annex compatibility.
Access it with C-x g.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-x g". magit-status))
#+END_SRC

** Which-key
   Which-key is a keybinding preview utility to show all subsequent keys when waiting for commands.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :config
    (which-key-mode t))
#+END_SRC

** Iedit
#+BEGIN_SRC emacs-lisp
(use-package iedit
    :bind ("C-c i" . iedit-mode))
#+END_SRC

** Org Bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :hook (org-mode . org-bullets-mode))
#+END_SRC

** Latex
#+BEGIN_SRC emacs-lisp
(use-package tex
  :defer t
  :ensure auctex
  :hook
  (LaTeX-mode . eglot-ensure)
  (LaTeX-mode . company-mode)
  :config
  (setq TeX-auto-save t)
  (setq TeX-engine 'luatex)
  (setq TeX-parse-self t))
#+END_SRC

** Quinckrun
   Quickrun provides utilities to quickly compile and execute programs
   F6 runs a program in eshell
#+BEGIN_SRC emacs-lisp
(use-package quickrun
  :bind ("<f6>" . quickrun-shell))
#+END_SRC

** Emmet
   Offers snippets for html and css
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :hook ((sgml-mode . emmet-mode)
         (css-mode . emmet-mode)))
#+END_SRC

** Neotree
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         t
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-move-forward-on-expand        nil
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-user-mode-line-format         nil
          treemacs-width                         35)
    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-projectile
  :after treemacs projectile)

(use-package treemacs-icons-dired
  :after treemacs dired)
  ;; :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit)
#+END_SRC

** Paredit
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :bind (:map paredit-mode-map
              ("M-[" . paredit-wrap-square)))
#+END_SRC

** Aggressive-indent-mode
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :hook
  (html-mode . aggressive-indent-mode)
  (css-mode  . aggressive-indent-mode)
  (clojure-mode . aggressive-indent-mode))
#+END_SRC

** Htmlize
#+BEGIN_SRC emacs-lisp
(use-package htmlize)
#+END_SRC

** Hindent
#+BEGIN_SRC emacs-lisp
(use-package hindent)
#+END_SRC

** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
 )
#+END_SRC

** Rust-lang
#+begin_src emacs-lisp
(use-package rustic
  :hook
  (rustic-mode . company-mode)
  :config
  (setq rustic-lsp-server 'rust-analyzer)
  (setq rustic-lsp-client 'eglot)
  (setq rustic-format-on-save nil))
#+end_src

** Clojure-lang
#+BEGIN_SRC emacs-lisp
(use-package cider
  :bind (:map cider-repl-mode-map
              ("C-c C-k" . cider-repl-clear-buffer)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :hook
  (clojure-mode . company-mode)
  (clojure-mode . rainbow-delimiters-mode)
  (clojure-mode . paredit-mode))
#+END_SRC

** Elixir-lang
#+begin_src emacs-lisp
(use-package elixir-mode
  :hook
  (elixir-mode . mix-minor-mode)
  (elixir-mode . company-mode)
  :bind (:map elixir-mode-map
              ("C-c C-f" . elixir-format)))
#+end_src

#+begin_src emacs-lisp
(use-package mix
  )
#+end_src

** Yaml-lang
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode)
#+END_SRC

** Nim-lang
#+BEGIN_SRC emacs-lisp
(use-package nim-mode
  :hook
  (nim-mode . eglot-ensure)
  (nim-mode . company-mode))
#+END_SRC

** Lua/Fennel-lang
#+begin_src emacs-lisp
(use-package fennel-mode)
(use-package lua-mode)
#+end_src

** Typescript-lang
#+begin_src emacs-lisp
(use-package typescript-mode
  :hook
  (typescript-mode . company-mode)
  (typescript-mode . eglot-ensure))
#+end_src

** C/C++-lang
Tab = 4 spaces, bsd indentation style
#+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :hook
  (c-mode . eglot-ensure)
  (c-mode . company-mode)
  :config
  (setq-default c-basic-offset 4)
  (setq-default c-default-style "bsd"))
#+END_SRC

#+begin_src emacs-lisp
(use-package c++-mode
  :ensure nil
  :hook
  (c++-mode . eglot-ensure)
  (c++-mode . company-mode))
#+end_src

** Js-lang
#+BEGIN_SRC emacs-lisp
(use-package js
  :hook
  (js-mode . flycheck-mode)
  (js-mode . company-mode)
  (js-mode . subword-mode))
#+END_SRC

** Haskell-lang
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
 
    :bind (:map haskell-mode-map
          ("C-c C-c" . haskell-compile)
          ("C-c C-l" . haskell-process-load-or-reload)
          ("C-`"     . haskell-interactive-bring)
          ("C-c C-t" . haskell-process-do-type)
          ("C-c C-i" . haskell-process-do-info)
          ("C-c C-k" . haskell-interactive-mode-clear))
    :config
    (setq haskell-interactive-popup-errors nil
          haskell-process-auto-import-loaded-modules t
          haskell-process-log t
          haskell-process-type 'stack-ghci
          ;haskell-tags-on-save t
          haskell-compile-cabal-build-command "stack build"
          haskell-process-suggest-hoogle-imports t)
    :hook
    ((haskell-mode . haskell-indentation-mode)
     (haskell-mode . interactive-haskell-mode)
     (haskell-mode . company-mode)
     (haskell-mode . flycheck-mode)
     (haskell-mode . hindent-mode)
     (haskell-mode . subword-mode)))
#+END_SRC

** Css-lang
#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :hook
  (css-mode . company-mode))
#+END_SRC

** Themes
Install the themes and set the default one
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-palenight t))
#+END_SRC

* Custom
Display emacs startup time
#+BEGIN_SRC emacs-lisp
(defun display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                   (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'display-startup-time)
#+END_SRC

#+begin_src emacs-lisp
;; Reset gc threshold
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src

