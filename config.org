#+TITLE: Dotemacs
#+AUTHOR: Dimitris Spythouris
#+SETUPFILE: html-theme/comfy_inline.theme
#+STARTUP: overview
#+OPTIONS: num:nil

* What is this?
This document contains my configurations for GNU Emacs. It aims to be easy to
read for a beginner and contains descriptions for every category so that anyone
can learn from it and understand what is going on. It is written using =org-mode=
and the final config is generated from [[file:init.el][init.el]], by parsing this file and
extracting the source code.

Most beginners (myself included) initially won't be able to grasp the seemingly
arcane syntax of emacs-lisp used throughout the configuration so my
recommendation is to take it slow and read about it either through the [[info:elisp#Top][E-lisp
Reference Manual]] through emacs or online [[https://www.gnu.org/software/emacs/manual/elisp.html][here]].

If you want to know more about emacs i heavily suggest the [[https://masteringemacs.org/book][Mastering Emacs]] book
or the [[https://www.emacswiki.org/emacs/LearningEmacs][Learning Emacs]] list on the Emacs wiki. The most efficient way to learn
though is by using it so have fun and enjoy!

The theme used in the html export is =comfy_inline= which can be found in this
amazing list of themes [[https://olmon.gitlab.io/org-themes/][here]].

* Use-package

[[https://github.com/jwiegley/use-package][Use-package]] is a macro that allows you to isolate package configuration in your
init file in both a performance-oriented and a tidy way. It is used to make
package initialization and configuration easier to write and read while also
reducing loading times drastically when emacs starts up. It is invoked by the
~(use-package <package>)~ command  as you'll soon notice.

I find it's the most useful package here as  it makes everything a lot
easier so before doing anything else we make sure it's installed and loaded.

- The ~(setq use-package-always-ensure t)~ line ensures every package specified is
  installed before proceeding. Everything is installed through [[https://melpa.org/#/][MELPA]] and [[https://elpa.gnu.org/][ELPA]].

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
  (setq use-package-always-ensure t)
#+END_SRC

* Core Settings
In this section we modify some default settings that address some minor pains
with emacs and/or personal preferences.
** Starting Directory
Always start in the user's home directory
#+BEGIN_SRC emacs-lisp
(setq default-directory "~/")
#+END_SRC

** Scrolling
Options for smooth scrolling using the mouse
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(3 ((shift) . 3)))
(setq mouse-wheel-progressive-speed nil)
(setq mouse-wheel-follow-mouse 't)
(setq scroll-step 1)
#+END_SRC

** Column numbers
Toggle column number display in the mode line
#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC

** Indentation
Set the default tab width to 4 spaces and replace tab characters with spaces.
Also unless specified otherwise, <tab> indents the current line.
#+BEGIN_SRC emacs-lisp
(setq-default tab-always-indent t)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+END_SRC

** Backup Files
Create backups of edited files in case of a disaster.
All backup files are saved in the ~/.emacs.d/saves directory.
A form of versioning is used to keep them safe.
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/saves"))
  backup-by-copying t
  version-control t
  delete-old-versions t
  kept-new-versions 20
  kept-old-versions 5
  )
#+END_SRC

** Yes/No
When emacs requires a yes/no answer make it one character instead of typing =yes=
or =no=
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Visual lines
Editing commands like movement or insertion/deletion act on visual lines, not
logical. This is useful when working on long lines of text that wrap through the screen.
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
#+END_SRC

** Disabled Commands
Enable all disabled commands. By default emacs disables some commands to save
the user from headaches but this is kind of redundant so we disable this functionality.
#+BEGIN_SRC emacs-lisp
(setq disabled-command-function nil)
#+END_SRC

** Sentences
Sentences end on a dot and one space. This is used to improve sentence
navigation with ~M-a~ and ~M-e~.
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

** Misc
#+BEGIN_SRC emacs-lisp
(use-package newcomment
  :ensure nil
  :bind
  ("C-x M-;" . comment-box))

(use-package view
  :ensure nil
  :bind ("C-v" . View-scroll-half-page-forward)
        ("M-v" . View-scroll-half-page-backward))

(use-package emacs
  :ensure nil
  :bind
  ("C-M-<left>"  . shrink-window-horizontally)
  ("C-M-<right>" . enlarge-window-horizontally)
  ("C-M-<down>"  . shrink-window)
  ("C-M-<up>"    . enlarge-window)
  ("M-o"         . other-window)
  ("C-<tab>"     . indent-relative)
  ("<f5>"        . compile)
  ("C-<f5>"      . recompile)
  ("<C-f9>"      . set-frame-font)
  ("C-x C-b"     . ibuffer)
  ("<f7>"        . toggle-transparency)
  ("M-j"         . (lambda () (interactive) (join-line -1)))
  :config
  (setq window-divider-default-right-width 1)
  (setq window-divider-default-bottom-width 1)
  (setq window-divider-default-places 'right-only)
  :hook (after-init . window-divider-mode))
#+END_SRC

* Base Package Settings
In this section we modify some base emacs packages and functionality of emacs
** Re-builder
Emacs's built-in regex builder. Invoking this in a buffer allows you to match
regexes against it, very useful.
#+BEGIN_SRC emacs-lisp
(use-package re-builder
  :config
  (setq reb-re-syntax 'string))
#+END_SRC

** Flymake
Flymake is a built-in linter. It shows errors/warnings and diagnostics when
enabled.
#+BEGIN_SRC emacs-lisp
(use-package flymake
  :defer t
  :bind (:map flymake-mode-map
              ("C-c ! s" . flymake-start)
              ("C-c ! d" . flymake-show-diagnostics-buffer)
              ("C-c ! n" . flymake-goto-next-error)
              ("C-c ! p" . flymake-goto-prev-error))
  :hook
  (emacs-lisp-mode . flymake-mode)
  :config
  (setq flymake-no-changes-timeout nil)
  (setq flymake-start-syntax-check-on-newline nil))
#+END_SRC

** Dired
Various settings for dired for better QoL.
#+BEGIN_SRC emacs-lisp
(setq dired-dwim-target t)
(setq dired-recursive-copies 'always)
(setq dired-recursive-deletes 'always)
#+END_SRC

** Winner-mode
Emacs built-in window history. Allows for undoing and redoing window changes.
#+BEGIN_SRC emacs-lisp
(use-package winner
  :defer 2
  :config
  (winner-mode 1)
  :bind
  ("C-c w u" . winner-undo)
  ("C-c w r" . winner-redo))
#+END_SRC

** Org-mode
Org-mode is a markup language similar to markdown but with many more features
and plugins. We configure some basic keybinds for link management and set up the
agenda files. This document is an example of org-mode in action.
#+BEGIN_SRC emacs-lisp
(use-package org
  :bind
  ("C-c o a" . org-agenda)
  ("C-c o c" . org-capture)
  ("C-c o l" . org-store-link)
  :config
  (setq org-agenda-span 30)
  (setq org-agenda-files (quote ("~/notes/")))
  (setq org-agenda-restore-windows-after-quit t)
  (setq org-agenda-compact-blocks t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-start-on-weekday nil)
  (setq org-agenda-sorting-strategy
      (quote
       ((agenda priority-down alpha-up)
        (todo priority-down alpha-up)
        (tags priority-down alpha-up))))
  (setq org-agenda-prefix-format
      (quote
       ((agenda . "%s %?-12t %e ")
        (timeline . "  %s")
        (todo . " %i %e ")
        (tags . " %i %e ")
        (search . " %i %e "))))

  (setq org-todo-keywords
      (quote
       ((sequence "TODO" "PROG" "PAUS" "|" "DONE" "CANC"))))

  (setq org-todo-keyword-faces
      '(("PROG" . "orange") ("PAUS" . "magenta") ("CANC" . "red") ("DONE" . "green")))

  (setq org-default-priority 72)
  (setq org-highest-priority 65)
  (setq org-lowest-priority 90)

  (setq org-bullets-bullet-list (quote ("◉" "◆" "✚" "☀" "○")))

  (setq org-src-window-setup 'current-window)
  (setq org-src-fontify-natively t)
  (setq org-src-preserve-indentation t)
  (setq org-src-tab-acts-natively t)
  (setq org-edit-src-content-indentation 0)
  (setq org-list-allow-alphabetical t)
  (setq org-hide-emphasis-markers t))

(use-package org-indent
  :ensure nil
  :config
  (setq org-startup-indented t))

;; Center text when in org-mode buffers
(defun org-mode-visual-fill ()
  (setq visual-fill-column-width 150
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . org-mode-visual-fill))
#+END_SRC

** Electric
Emacs labels as "electric" any behaviour that involves contextual auto-insertion
of characters. In this case we enable this functionality for brackets,
parentheses and other usual candidates as well as opening two newlines between them.
   #+BEGIN_SRC emacs-lisp
(use-package electric
  :config
  (electric-pair-mode 1)
  (electric-indent-mode 1)
  (setq electric-pair-open-newline-between-pairs t))
   #+END_SRC

** Show-paren-mode
Highlight matching parentheses and delimiters when the pointer is above them.
   #+BEGIN_SRC emacs-lisp
(use-package paren
  :config
  (setq show-paren-style 'parenthesis)
  (setq show-paren-when-point-in-periphery t)
  (setq show-paren-when-point-inside-paren nil)
  (show-paren-mode 1))
   #+END_SRC

** Hippie-expand
Hippie-expand is an alternative to dabbrev which offers dynamic word completion,
or "dynamic abbreviation". We define the set of rules to try on each keypress.
#+BEGIN_SRC emacs-lisp
(use-package hippie-exp
  :bind
  ("M-/" . hippie-expand)
  :config
  (setq hippie-expand-try-functions-list '(try-expand-dabbrev-visible
                                           try-expand-dabbrev
                                           try-expand-dabbrev-all-buffers
                                           try-expand-dabbrev-from-kill
                                           try-complete-file-name-partially
                                           try-complete-file-name
                                           try-expand-all-abbrevs
                                           try-expand-list
                                           try-expand-line
                                           try-expand-dabbrev-from-kill
                                           try-complete-lisp-symbol-partially
                                           try-complete-lisp-symbol)))
#+END_SRC

* Other Package Settings
** Telephone-line
#+BEGIN_SRC emacs-lisp
(use-package telephone-line
  ;; :init
  :config
  (telephone-line-mode 1))
#+END_SRC

** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :bind
  ("C-;" . avy-goto-char)
  ("C-M-;" . avy-goto-line))
#+END_SRC

** Writeroom-mode
#+begin_src emacs-lisp
(use-package writeroom-mode
  :defer 3)
#+end_src

** Solaire-mode
#+begin_src emacs-lisp
(use-package solaire-mode
  :config
  (solaire-global-mode +1)

  ;; Disable mode-line face remapping (for telephone-line)
  (dolist (face '(mode-line mode-line-inactive))
  (setf (alist-get face solaire-mode-remap-modeline) nil)))
#+end_src

** Xterm-color
   #+BEGIN_SRC emacs-lisp
   (use-package xterm-color
     :defer t
     :config
     (setq compilation-environment '("TERM=xterm-256color"))
     (defun my/advice-compilation-filter (f proc string)
       (funcall f proc (xterm-color-filter string)))
     (advice-add 'compilation-filter :around #'my/advice-compilation-filter))
   #+END_SRC

** Deft
#+BEGIN_SRC emacs-lisp
(use-package deft
  :defer 0.5
  :init
  (setq deft-directory "~/notes"
        deft-extensions '("org" "md" "txt")
        deft-use-filename-as-title t
        deft-recursive t))
#+END_SRC

** Zetteldeft
#+BEGIN_SRC emacs-lisp
(use-package zetteldeft
  :after deft
  :config
  (zetteldeft-set-classic-keybindings))
#+END_SRC

** Ivy, Counsel, Swiper
Enable ivy globally (replacement for ido).
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish ivy-mode
  :bind (("C-c C-r" . ivy-resume))
  :config
    (ivy-mode t)
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-count-format "(%d/%d) "))
#+END_SRC

   Enable swiper (enhanced isearch for ivy) and assign C-s to search
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :bind
  ("C-s" . swiper)
  ("C-r" . swiper))
#+END_SRC

   Counsel is a collection of ivy enhanced base commands
   Bind some keys to common commands
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :config
  (setq counsel-fzf-cmd "fzf -f \"%s\"")
  :bind (("C-x C-f"   . counsel-find-file)
         ("M-x"       . counsel-M-x)
         ("<f2> u"    . counsel-unicode-char)
         ("C-c g"     . counsel-git)
         ("C-c j"     . counsel-git-grep)
         ("C-x l"     . counsel-locate)
         ("C-c f d"   . counsel-dired-jump)
         ("C-c f f"   . counsel-dired-jump)
         ("M-i"       . counsel-imenu)
         ("<f9>"      . counsel-load-theme)))
#+end_src

** Company
   enable company with various settings
#+begin_src emacs-lisp
(use-package company
  :diminish
  :hook
   (latex-mode      . company-mode)
   (rustic-mode     . company-mode)
   (clojure-mode    . company-mode)
   (elixir-mode     . company-mode)
   (nim-mode        . company-mode)
   (typescript-mode . company-mode)
   (c-mode          . company-mode)
   (c++-mode        . company-mode)
   (js-mode         . company-mode)
   (haskell-mode    . company-mode)
   (css-mode        . company-mode)
   (emacs-lisp-mode . company-mode)
  :config
   (setq company-idle-delay 0.1)
   (setq company-minimum-prefix-length 1)
   (setq company-selection-wrap-around t)
   (setq company-tooltip-align-annotations t)
   (setq company-tooltip-limit 10)
   (setq company-dabbrev-downcase nil)
   (company-tng-configure-default))
#+end_src

** Flycheck
load flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :defer t
  :hook
  (js-mode . flycheck-mode)
  (haskell-mode . flycheck-mode)
  :config
  (setq flycheck-check-syntax-automatically '(save mode-enabled)))
#+end_src

** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :config
  (yas-global-mode)
  :bind
  ("c-'"      . yas-expand)
  ("c-c <tab>". company-yasnippet))
#+end_src

#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :after (yasnippet))
#+end_src

** All-The-Icons
#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :hook
  (dired-mode . all-the-icons-dired-mode))

(use-package all-the-icons-ivy
  :config
  (setq all-the-icons-ivy-file-commands
    '(counsel-find-file
      counsel-file-jump
      counsel-recentf
      projectile-find-file
      projectile-find-dir))
  (all-the-icons-ivy-setup)
  (ivy-set-display-transformer 'ivy-switch-buffer 'all-the-icons-ivy-buffer-transformer))
#+end_src

** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :defer 5
  :config
  (setq projectile-completion-system 'ivy)
  (setq projectile-tags-backend 'etags-select)
  (add-to-list 'projectile-globally-ignored-modes "org-mode")
  (add-to-list 'projectile-globally-ignored-directories "*.ccls-cache")
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("c-c p" . projectile-command-map)))
#+end_src

#+begin_src emacs-lisp
(use-package counsel-projectile
  :after (counsel projectile))
#+end_src

** Eglot
#+begin_src emacs-lisp
(use-package eglot
  :defer t
  :hook
  (latex-mode . eglot-ensure)
  (nim-mode . eglot-ensure)
  (c-mode . eglot-ensure)
  (c++-mode . eglot-ensure)
  :config
  (add-to-list 'eglot-server-programs '(haskell-mode    . ("ghcide" "--lsp")))
  (add-to-list 'eglot-server-programs '(nim-mode        . ("nimlsp")))
  (add-to-list 'eglot-server-programs '(c-mode          . ("clangd" "--background-index" "--suggest-missing-includes" "--all-scopes-completion" "--completion-style=detailed")))
  (add-to-list 'eglot-server-programs '(elixir-mode     . ("~/programs/elixir-ls/language_server.sh")))
  (add-to-list 'eglot-server-programs '(typescript-mode . ("typescript-language-server" "--stdio")))
  (add-to-list 'eglot-server-programs '(c++-mode        . ("clangd" "--background-index" "--suggest-missing-includes" "--all-scopes-completion" "--completion-style=detailed")))
  (add-to-list 'eglot-server-programs '((tex-mode context-mode texinfo-mode bibtex-mode) . ("digestif"))))
#+end_src

** Magit
magit is an interface to git.
we also install magit-annex for git-annex compatibility.
access it with c-x g.
#+begin_src emacs-lisp
(use-package magit
  :bind ("c-x g". magit-status))
#+end_src

** Which-key
   which-key is a keybinding preview utility to show all subsequent keys when waiting for commands.
#+begin_src emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :config
    (which-key-mode t))
#+end_src

** iedit
#+begin_src emacs-lisp
(use-package iedit
    :bind ("c-c i" . iedit-mode))
#+end_src

** org bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :hook (org-mode . org-bullets-mode))
#+end_src

** latex
#+begin_src emacs-lisp
(use-package tex
  :ensure auctex
  :config
  (setq tex-auto-save t)
  (setq tex-engine 'lualatex)
  (setq tex-parse-self t))
#+end_src

** emmet
   offers snippets for html and css
#+begin_src emacs-lisp
(use-package emmet-mode
  :hook ((sgml-mode . emmet-mode)
         (css-mode . emmet-mode)))
#+end_src

** neotree
#+begin_src emacs-lisp
(use-package treemacs
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "m-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         t
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-move-forward-on-expand        nil
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-user-mode-line-format         nil
          treemacs-width                         35)
    ;; the default width and height of the icons is 22 pixels. if you are
    ;; using a hi-dpi display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("m-0"       . treemacs-select-window)
        ("c-x t 1"   . treemacs-delete-other-windows)
        ("c-x t t"   . treemacs)
        ("c-x t b"   . treemacs-bookmark)
        ("c-x t c-t" . treemacs-find-file)
        ("c-x t m-t" . treemacs-find-tag)))

(use-package treemacs-projectile
  :after treemacs projectile)

(use-package treemacs-icons-dired
  :after treemacs dired)
  ;; :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit)
#+end_src

** paredit
#+begin_src emacs-lisp
(use-package paredit
  :hook
  (clojure-mode    . paredit-mode)
  (emacs-lisp-mode . paredit-mode)
  :bind (:map paredit-mode-map
              ("m-[" . paredit-wrap-square)))
#+end_src

** aggressive-indent-mode
#+begin_src emacs-lisp
(use-package aggressive-indent
  :hook
  (html-mode . aggressive-indent-mode)
  (css-mode  . aggressive-indent-mode)
  (clojure-mode . aggressive-indent-mode))
#+end_src

** htmlize
#+begin_src emacs-lisp
(use-package htmlize
  :defer 5)
#+END_SRC

** Hindent
#+BEGIN_SRC emacs-lisp
(use-package hindent)
#+END_SRC

** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters)
#+END_SRC

** LANGUAGES
*** Rust-lang
#+begin_src emacs-lisp
(use-package rustic
  :defer t
  :config
  (setq rustic-lsp-server 'rust-analyzer)
  (setq rustic-lsp-client 'eglot)
  (setq rustic-format-on-save nil))
#+end_src

*** Clojure-lang
#+BEGIN_SRC emacs-lisp
(use-package cider
  :bind (:map cider-repl-mode-map
              ("C-c C-k" . cider-repl-clear-buffer)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :hook
  (clojure-mode . rainbow-delimiters-mode))
#+END_SRC

*** Elixir-lang
#+begin_src emacs-lisp
(use-package elixir-mode
  :hook
  (elixir-mode . mix-minor-mode)
  :bind (:map elixir-mode-map
              ("C-c C-f" . elixir-format)))
#+end_src

#+begin_src emacs-lisp
(use-package mix
  )
#+end_src

*** Yaml-lang
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode)
#+END_SRC

*** Nim-lang
#+BEGIN_SRC emacs-lisp
(use-package nim-mode)
#+END_SRC

*** Lua-lang
#+begin_src emacs-lisp
(use-package lua-mode
  :defer t)
#+end_src

*** Typescript-lang
#+begin_src emacs-lisp
(use-package typescript-mode
  :hook
  (typescript-mode . eglot-ensure))
#+end_src

*** C-lang
Tab = 4 spaces, bsd indentation style
#+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :config
  (setq-default c-basic-offset 8)
  (setq-default c-default-style "bsd"))
#+END_SRC

*** Js-lang
#+BEGIN_SRC emacs-lisp
(use-package js
  :hook
  (js-mode . subword-mode))
#+END_SRC

*** Haskell-lang
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode

    :bind (:map haskell-mode-map
          ("C-c C-c" . haskell-compile)
          ("C-c C-l" . haskell-process-load-or-reload)
          ("C-`"     . haskell-interactive-bring)
          ("C-c C-t" . haskell-process-do-type)
          ("C-c C-i" . haskell-process-do-info)
          ("C-c C-k" . haskell-interactive-mode-clear))
    :config
    (setq haskell-interactive-popup-errors nil
          haskell-process-auto-import-loaded-modules t
          haskell-process-log t
          haskell-process-type 'stack-ghci
          ;haskell-tags-on-save t
          haskell-compile-cabal-build-command "stack build"
          haskell-process-suggest-hoogle-imports t)
    :hook
    ((haskell-mode . haskell-indentation-mode)
     (haskell-mode . interactive-haskell-mode)
     (haskell-mode . hindent-mode)
     (haskell-mode . subword-mode)))
#+END_SRC

*** Css-lang
#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :defer t)
#+END_SRC

*** Elisp-lang
   #+begin_src emacs-lisp
(use-package elisp-mode
  :ensure nil
  :bind (:map emacs-lisp-mode-map
              ("C-c C-k" . eval-buffer)))
   #+end_src

** Themes
Install the themes and set the default one
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t
        doom-modeline-icon t)
  (doom-themes-org-config)
  (doom-themes-treemacs-config)
  (load-theme 'doom-sourcerer t))
#+END_SRC

* Custom
Display emacs startup time
#+BEGIN_SRC emacs-lisp
(defun display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                   (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'display-startup-time)
#+END_SRC

#+begin_src emacs-lisp
;; Reset gc threshold
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src
