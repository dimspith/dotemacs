#+TITLE: My Emacs Configuration
#+AUTHOR: Dimitris Spythouris
#+STARTUP: overview
#+OPTIONS: num:nil

* Core Settings
** Starting Directory
Configure emacs to start in the home directory.
#+BEGIN_SRC emacs-lisp
(setq default-directory "~/")
#+END_SRC

** Scrolling
Smooth scrolling.
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(3 ((shift) . 3)))
(setq mouse-wheel-progressive-speed nil)
(setq mouse-wheel-follow-mouse 't)
(setq scroll-step 1)
#+END_SRC

** Splash Screen
Skip the splash screen/message and make the scratch buffer empty.
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(setq initial-scratch-message nil)
(setq inhibit-startup-echo-message t)
#+END_SRC

** Bars
Turn off the scroll bar, menu bar and the tool bar.
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC

** Indentation
Default tab width is 4 and tabs are now spaces.
#+BEGIN_SRC emacs-lisp
(setq-default tab-always-indent t)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+END_SRC

** Backup Files
All backup files are saved in the ~/.emacs.d/saves directory.
Some versioning of files is used to prevent disasters.
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/saves"))
  backup-by-copying t
  version-control t
  delete-old-versions t
  kept-new-versions 20
  kept-old-versions 5
  )
#+END_SRC

** Yes/No
When emacs requires a yes/no answer make it one character.
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Visual lines
#+BEGIN_SRC emacs-lisp
;; (global-visual-line-mode t)
#+END_SRC
** Font
The font used.
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "Fira Code 11" ))
(set-face-attribute 'default nil :family "Fira Code" :height 110 :weight 'normal)
#+END_SRC

** Disabled Commands
Enable all disabled commands.
#+BEGIN_SRC emacs-lisp
(setq disabled-command-function nil)
#+END_SRC

** Sentences
Sentences end on a dot and one space. This is used to improve sentence
navigation with ~M-a~ and ~M-e~.
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

* Base Package Settings
** Eshell
#+BEGIN_SRC emacs-lisp
(use-package eshell
  :straight nil
  :bind 
  ("C-c t e" . eshell)
  ("C-c t a" . ansi-term)
  :hook (eshell-mode . 
    (lambda ()
      (bind-key "C-l" (lambda () (interactive) (eshell/clear 1)) eshell-mode-map)
      (eshell/alias "f" "find-file $1")
      (eshell/alias "fo" "find-file-other-window $1")
      (eshell/alias "d" "dired $1")
      (eshell/alias "ll" "ls -l")
      (eshell/alias "la" "ls -al"))))
#+END_SRC

** Re-builder
#+BEGIN_SRC emacs-lisp
(use-package re-builder
  :straight nil
  :config
  (setq reb-re-syntax 'string))
#+END_SRC
** Flymake
#+BEGIN_SRC emacs-lisp
(use-package flymake
  :straight t
  :config
  (setq flymake-no-changes-timeout nil)
  (setq flymake-start-syntax-check-on-newline nil))
#+END_SRC
** Dired
Guess resulting directory on dired operations
#+BEGIN_SRC emacs-lisp
(setq dired-dwim-target t)
#+END_SRC

** Winner-mode
   Easily undo and redo window changes.
   #+BEGIN_SRC emacs-lisp
(use-package winner
  :straight nil
  :demand
  :config
  (winner-mode 1)
  :bind
  ("C-c w u" . winner-undo)
  ("C-c w r" . winner-redo))
   #+END_SRC

** Superword mode
   Enable subword mode on certain major modes (treat CamelCase as multiple words).
   #+BEGIN_SRC emacs-lisp
(use-package subword
  :straight nil
  :hook((haskell-mode . subword-mode)
        (js-mode      . subword-mode)))
   #+END_SRC

** Org-mode
 #+BEGIN_SRC emacs-lisp
(use-package org
  ;; :straight (:type built-in)
  :straight t
  :config
  (setq org-agenda-files '("~/.emacs.d/notes/schedule.org"))
  (setq org-src-window-setup 'current-window)
  (setq org-src-fontify-natively t)
  (setq org-src-preserve-indentation t)
  (setq org-src-tab-acts-natively t)
  (setq org-edit-src-content-indentation 0)
  :bind
  ("C-c o a" . org-agenda)
  ("C-c c"   . org-capture)
  ("C-c o l" . org-store-link))
 #+END_SRC

** Electric
   Enable electric pair and indent mode.
   A newline between adjacent parentheses opens an extra one.
   #+BEGIN_SRC emacs-lisp
(use-package electric
  :straight nil
  :config
  (electric-pair-mode 1)
  (electric-indent-mode 1)
  (setq electric-pair-open-newline-between-pairs t))
   #+END_SRC

** Isearch
   Make isearch search for regexes by default.
   #+BEGIN_SRC emacs-lisp
(use-package isearch
  :straight nil
  :bind
  ("C-s" . isearch-forward-regexp))
   #+END_SRC

** Show-paren-mode
   Highlight matching parentheses.
   #+BEGIN_SRC emacs-lisp
(use-package paren
  :straight nil
  :config
  (setq show-paren-style 'parenthesis)
  (setq show-paren-when-point-in-periphery t)
  (setq show-paren-when-point-inside-paren nil)
  (show-paren-mode 1))
   #+END_SRC

** Hippie-expand
#+BEGIN_SRC emacs-lisp
(use-package hippie-exp
  :straight nil
  :bind
  ("M-/" . hippie-expand)
  :config
  (setq hippie-expand-try-functions-list '(try-complete-file-name-partially 
                                           try-complete-file-name
                                           try-expand-dabbrev
                                           try-expand-dabbrev-all-buffers
                                           try-expand-line
                                           try-expand-list
                                           try-expand-all-abbrevs
                                           try-expand-dabbrev-from-kill
                                           try-complete-lisp-symbol-partially
                                           try-complete-lisp-symbol)))
#+END_SRC

** Misc
#+BEGIN_SRC emacs-lisp
(use-package view
  :straight nil
  :bind ("C-v" . View-scroll-half-page-forward)
        ("M-v" . View-scroll-half-page-backward))

(use-package align
  :straight nil
  :bind ("C-c e a a" . align)
        ("C-c e a r" . align-regexp)
        ("C-c e a s" . align-current))        

(use-package emacs
  :straight nil
  :bind
  ("C-M-<left>"  . shrink-window-horizontally)  
  ("C-M-<right>" . enlarge-window-horizontally)
  ("C-M-<down>"  . shrink-window)               
  ("C-M-<up>"    . enlarge-window)
  ("M-o"         . other-window)
  ("C-<tab>"     . indent-relative)
  ("<f5>"        . compile)
  ("<C-f9>"      . set-frame-font)
  ("C-x C-b"     . ibuffer)
  ("<f7>"        . toggle-transparency)
  ("M-j"         . (lambda () (interactive) (join-line -1)))
  :config
  (setq window-divider-default-right-width 1)
  (setq window-divider-default-bottom-width 1)
  (setq window-divider-default-places 'right-only)
  :hook (after-init . window-divider-mode))
#+END_SRC

* Other Package Settings
** Org-roam
#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :straight (:host github :repo "jethrokuan/org-roam" :branch "master")
  :hook 
  ((after-init . org-roam-mode)
  (org-roam-backlinks-mode . visual-line-mode))
  :custom
  (org-roam-directory (expand-file-name "~/Notes/"))
  :bind (:map org-roam-mode-map
     (("C-c n l" . org-roam)
      ("C-c n f" . org-roam-find-file)
      ("C-c n t" . org-roam-today)
      ("C-c n b" . org-roam-switch-to-buffer)
      ("C-c n g" . org-roam-show-graph))
     :map org-mode-map
     (("C-c n i" . org-roam-insert))))
#+END_SRC

** Ivy, Counsel, Swiper
Enable ivy globally (replacement for ido).
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish ivy-mode
  :straight t
  :bind (("C-c C-r" . ivy-resume))
  :config
    (ivy-mode t)
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-count-format "(%d/%d) ")
  )
#+END_SRC

   Enable swiper (enhanced isearch for ivy) and assign C-s to search
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :straight t
  :bind (("C-M-s" . swiper))
)
#+END_SRC

   Counsel is a collection of ivy enhanced base commands
   Bind some keys to common commands
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :straight t
  :config
  (counsel-mode t)
  :bind (("C-x C-f" . counsel-find-file)
         ("<f2> u"  . counsel-unicode-char)
         ("C-c s g f" . counsel-git)
         ("C-c s d" . counsel-dired-jump)
         ("C-c s g g" . counsel-git-grep)
         ("C-c s f" . counsel-fzf)
         ("C-c s l" . counsel-locate)
         ("C-x r i" . counsel-register)
         ("M-i"     . counsel-imenu)
         ("<f9>"    . counsel-load-theme)
         ("<f1> x"  . counsel-descbinds)))
#+END_SRC

** AMX
Replacement for smex with good recents support and counsel integration
#+BEGIN_SRC emacs-lisp
(use-package amx
  :straight t
  :config
  (setq amx-backend 'auto)
  (setq amx-save-file "~/.emacs.d/amx-items")
  (setq amx-history-length 50)
  (amx-mode 1))
#+END_SRC

** Flycheck
Load flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :straight t
  :config
  (setq flycheck-check-syntax-automatically '(save mode-enabled)))
#+END_SRC

** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :straight t
  :diminish yas-minor-mode
  :config
  ;; (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
  (yas-global-mode)
  :bind
  ("C-c C-<tab>"    . company-yasnippet)
  ("C-c <tab>". yas-expand))
#+END_SRC

** All-the-icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
  :straight t
  :hook
  (dired-mode . all-the-icons-dired-mode))

(use-package all-the-icons-ivy
  :straight t
  :config 
  (setq all-the-icons-ivy-file-commands
    '(counsel-find-file
      counsel-file-jump
      counsel-recentf
      projectile-find-file
      projectile-find-dir))
  (all-the-icons-ivy-setup)
  (ivy-set-display-transformer 'ivy-switch-buffer 'all-the-icons-ivy-buffer-transformer))
#+END_SRC

** Impatient-mode
#+BEGIN_SRC emacs-lisp
(use-package impatient-mode
  :straight t)

(defun markdown-html (buffer)
  (princ (with-current-buffer buffer
           (format "<!DOCTYPE html><html><script src=\"https://cdnjs.cloudflare.com/ajax/libs/he/1.1.1/he.js\"></script><link rel=\"stylesheet\" href=\"https://assets-cdn.github.com/assets/github-e6bb18b320358b77abe040d2eb46b547.css\"><link rel=\"stylesheet\" href=\"https://assets-cdn.github.com/assets/frameworks-95aff0b550d3fe338b645a4deebdcb1b.css\"><title>Impatient Markdown</title><div id=\"markdown-content\" style=\"display:none\">%s</div><div class=\"markdown-body\" style=\"max-width:968px;margin:0 auto;\"></div><script>fetch('https://api.github.com/markdown', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ \"text\": document.getElementById('markdown-content').innerHTML, \"mode\": \"gfm\", \"context\": \"knit-pk/homepage-nuxtjs\"}) }).then(response => response.text()).then(response => {document.querySelector('.markdown-body').innerHTML = he.decode(response)}).then(() => { fetch(\"https://gist.githubusercontent.com/FieryCod/b6938b29531b6ec72de25c76fa978b2c/raw/\").then(response => response.text()).then(eval)});</script></html>"
                   (buffer-substring-no-properties (point-min) (point-max))))
         (current-buffer)))

(defun markdown-preview-like-god ()
  (interactive)
  (impatient-mode 1)
  (setq imp-user-filter #'markdown-html)
  (cl-incf imp-last-state)
  (imp--notify-clients))
#+END_SRC

** Simple-mpc
#+BEGIN_SRC emacs-lisp
(use-package simple-mpc
  :straight t)
#+END_SRC

** Company
   Enable company with various settings
#+BEGIN_SRC emacs-lisp
(use-package company
  :straight t
  :diminish
  :config
   (setq company-idle-delay 0.3)
   (setq company-minimum-prefix-length 1)
   (setq company-selection-wrap-around t)
   (setq company-tooltip-align-annotations t)
   (setq company-tooltip-limit 10)
   (setq company-dabbrev-downcase nil)
   (company-tng-configure-default))
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :straight t
  :config
  (setq projectile-completion-system 'ivy)
  (setq projectile-tags-backend 'etags-select)
  (add-to-list 'projectile-globally-ignored-modes "org-mode")
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1))
#+END_SRC

** Eglot
#+BEGIN_SRC emacs-lisp
(use-package eglot
  :straight t
  :config
  (add-to-list 'eglot-server-programs '(haskell-mode . ("ghcide" "--lsp"))))
  (add-to-list 'eglot-server-programs '((tex-mode context-mode texinfo-mode bibtex-mode)
                                        . ("digestif")))
#+END_SRC

** Magit
Magit is an interface to git.
We also install magit-annex for git-annex compatibility.
Access it with C-x g.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :straight t
  :bind ("C-x g". magit-status))
#+END_SRC

** Which-key
   Which-key is a keybinding preview utility to show all subsequent keys when waiting for commands.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :straight t
  :diminish which-key-mode
  :config
    (which-key-mode t))
#+END_SRC

** Iedit
#+BEGIN_SRC emacs-lisp
(use-package iedit
  :straight t
    :bind ("C-;" . iedit-mode))
#+END_SRC

** Org Bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :straight t
  :hook (org-mode . org-bullets-mode))
#+END_SRC

** Latex
#+BEGIN_SRC emacs-lisp
(use-package tex
  :defer t
  :straight auctex
  :hook
  (LaTeX-mode . company-mode)
  (LaTeX-mode . eglot-ensure)
  :config
  (setq TeX-auto-save t)
  (setq TeX-engine 'luatex)
  (setq TeX-parse-self t))
#+END_SRC

** Quickrun
   Quickrun provides utilities to quickly compile and execute programs
   F6 runs a program in eshell
#+BEGIN_SRC emacs-lisp
(use-package quickrun
  :straight t
  :bind ("<f6>" . quickrun-shell))
#+END_SRC

** Ace Jump Mode
#+BEGIN_SRC emacs-lisp
  (use-package ace-jump-mode
    :straight t
    :bind
    ("C-c SPC" . ace-jump-mode))
#+END_SRC

** Emmet
   Offers snippets for html and css
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :straight t
  :hook ((sgml-mode . emmet-mode)
         (css-mode . emmet-mode)))
#+END_SRC

** Neotree
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :straight t
  :bind
  ("<f8>" . neotree-toggle)
  :config
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow)
        neo-smart-open t
        neo-auto-indent-point t
        neo-autorefresh t))
#+END_SRC

** Themes
Install the themes and set the default one
#+BEGIN_SRC emacs-lisp
(use-package noctilux-theme :straight t)
(use-package gotham-theme :straight t)
(use-package gruber-darker-theme :straight t)
(use-package srcery-theme :straight t)
(load-theme 'gotham t)
#+END_SRC

** Esup
Esup is a startup profiler. M-x esup calculates which packages delay startup
#+BEGIN_SRC emacs-lisp
(use-package esup :straight t)
#+END_SRC

** Utop
#+BEGIN_SRC emacs-lisp
(use-package utop
  :straight t)
#+END_SRC
** Aggressive-indent-mode
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent :straight t)
#+END_SRC

** Htmlize
#+BEGIN_SRC emacs-lisp
(use-package htmlize :straight t)
#+END_SRC

** Haskell-mode
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :straight t
    :bind (:map haskell-mode-map
          ("C-c C-c" . haskell-compile)
          ("C-c C-l" . haskell-process-load-or-reload)
          ("C-`"     . haskell-interactive-bring)
          ("C-c C-t" . haskell-process-do-type)
          ("C-c C-i" . haskell-process-do-info)
          ("C-c C-k" . haskell-interactive-mode-clear))
    :config
    (setq haskell-interactive-popup-errors nil
          haskell-process-auto-import-loaded-modules t
          haskell-process-log t
          haskell-process-type 'stack-ghci
          ;haskell-tags-on-save t
          haskell-compile-cabal-build-command "stack build"
          haskell-process-suggest-hoogle-imports t)
    :hook
    ((haskell-mode . haskell-indentation-mode)
     (haskell-mode . interactive-haskell-mode)
     (haskell-mode . company-mode)
     (haskell-mode . flycheck-mode)
     (haskell-mode . hindent-mode)))
#+END_SRC

** Hindent
#+BEGIN_SRC emacs-lisp
(use-package hindent :straight t)
#+END_SRC

** YAML-mode
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode :straight t)
#+END_SRC

** Rust-mode
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :straight t)
#+END_SRC

** C-mode
Tab = 4 spaces, bsd indentation style
#+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :config
  (setq-default c-basic-offset 4)
  (setq-default c-default-style "bsd")
  :hook
  (c-mode . company-mode)
  (c-mode . eglot-ensure))
#+END_SRC

** Js-mode
#+BEGIN_SRC emacs-lisp
(use-package js
  :hook
  (js-mode . company-mode)
  (js-mode . flycheck-mode))
#+END_SRC

** HTML-mode
#+BEGIN_SRC emacs-lisp
(use-package html-mode
  :straight nil
  :hook
  (html-mode . aggressive-indent-mode))
#+END_SRC

** Fish-mode
#+BEGIN_SRC emacs-lisp
(use-package fish-mode :straight t)
#+END_SRC

** CSS-mode
#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :straight t
  :hook
  (css-mode . aggressive-indent-mode)
  (css-mode . company-mode))
#+END_SRC

** Modeline
#+BEGIN_SRC emacs-lisp
(use-package telephone-line
  :straight t
  :config
  (telephone-line-mode t))
#+END_SRC

* My functions
  Indent the whole buffer
#+BEGIN_SRC emacs-lisp
(defun iwb ()
  "indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max)))
#+END_SRC

Toggle opacity
#+BEGIN_SRC emacs-lisp
 (defun toggle-transparency ()
   (interactive)
   (let ((alpha (frame-parameter nil 'alpha)))
     (set-frame-parameter
      nil 'alpha
      (if (eql (cond ((numberp alpha) alpha)
                     ((numberp (cdr alpha)) (cdr alpha))
                     ;; Also handle undocumented (<active> <inactive>) form.
                     ((numberp (cadr alpha)) (cadr alpha)))
               100)
               '(87 . 87) '(100 . 100)))))
#+END_SRC
