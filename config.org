#+TITLE: Dotemacs
#+AUTHOR: dimspith
#+STARTUP: overview
#+OPTIONS: num:nil

* Core Settings
** Reduce *Message* Noise at startup
#+begin_src emacs-lisp
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message user-login-name
      inhibit-default-init t
      initial-major-mode 'fundamental-mode
      initial-scratch-message nil)
#+end_src

** Misc optimizations (taken from DOOM Emacs)
#+begin_src emacs-lisp
;; A second, case-insensitive pass over `auto-mode-alist' is time wasted, and
;; indicates misconfiguration (don't rely on case insensitivity for file names).
(setq auto-mode-case-fold nil)

;; Disable bidirectional text scanning for a modest performance boost.
(setq-default bidi-display-reordering 'left-to-right
              bidi-paragraph-direction 'left-to-right)

;; Disabling the BPA makes redisplay faster, but might produce incorrect display
;; reordering of bidirectional text with embedded parentheses and other bracket
;; characters whose 'paired-bracket' Unicode property is non-nil.
(setq bidi-inhibit-bpa t)  ; Emacs 27 only

;; Reduce rendering/line scan work for Emacs by not rendering cursors or regions
;; in non-focused windows.
(setq-default cursor-in-non-selected-windows nil)
(setq highlight-nonselected-windows nil)

;; More performant rapid scrolling over unfontified regions. May cause brief
;; spells of inaccurate syntax highlighting right after scrolling, which should
;; quickly self-correct.
(setq fast-but-imprecise-scrolling t)

;; Don't ping things that look like domain names.
(setq ffap-machine-p-known 'reject)

;; Resizing the Emacs frame can be a terribly expensive part of changing the
;; font. By inhibiting this, we halve startup times, particularly when we use
;; fonts that are larger than the system default (which would resize the frame).
(setq frame-inhibit-implied-resize t)

;; Emacs "updates" its ui more often than it needs to, so slow it down slightly
(setq idle-update-delay 1.0)  ; default is 0.5

;; Font compacting can be terribly expensive, especially for rendering icon
;; fonts on Windows. Whether disabling it has a notable affect on Linux and Mac
;; hasn't been determined, but do it there anyway, just in case. This increases
;; memory usage, however!
(setq inhibit-compacting-font-caches t)

;; Increase how much is read from processes in a single chunk (default is 4kb).
;; This is further increased elsewhere, where needed (like our LSP module).
(setq read-process-output-max (* 64 1024))  ; 64kb
#+end_src

** Starting Directory
Always start in the user's home directory
#+BEGIN_SRC emacs-lisp
(setq default-directory "~/")
#+END_SRC

** Scrolling
Options for smooth scrolling using the mouse
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(3 ((shift) . 3)))
(setq mouse-wheel-progressive-speed nil)
(setq mouse-wheel-follow-mouse 't)
(setq scroll-step 1)
#+END_SRC

** Column numbers
Toggle column number display in the mode line
#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC

** Indentation
Set the default tab width to 4 spaces and replace tab characters with spaces.
Also unless specified otherwise, <tab> indents the current line.
#+BEGIN_SRC emacs-lisp
(setq-default tab-always-indent t)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+END_SRC

** Backup Files
Create backups of edited files in case of a disaster.
All backup files are saved in the =~/.local/share/emacs/saves= directory.
A form of versioning is used to keep them safe.
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.local/share/emacs/saves"))
      backup-by-copying t
      version-control t
      delete-old-versions t
      kept-new-versions 20
      kept-old-versions 5)
#+END_SRC

** Yes/No
When emacs requires a yes/no answer make it one character instead of typing =yes=
or =no=
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Visual lines
Editing commands like movement or insertion/deletion act on visual lines, not
logical. This is useful when working on long lines of text that wrap through the screen.
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
#+END_SRC

** Disabled Commands
Enable all disabled commands. By default emacs disables some commands to save
the user from headaches but this is kind of redundant so we disable this functionality.
#+BEGIN_SRC emacs-lisp
(setq disabled-command-function nil)
#+END_SRC

** Sentences
Sentences end on a dot and one space. This is used to improve sentence
navigation with ~M-a~ and ~M-e~.
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

** Delete Selection Mode
Delete selection mode causes emacs to handle selections like most other editors.
That is, pasting or deleting while having text selected overwrites it.
#+begin_src emacs-lisp
(delete-selection-mode 1)
#+end_src

** Misc
#+BEGIN_SRC emacs-lisp
(use-package newcomment
  :straight (:type built-in)
  :bind
  ("C-x M-;" . comment-box))

(use-package emacs
  :straight (:type built-in)
  :bind
  ("C-M-<left>"  . shrink-window-horizontally)
  ("C-M-<right>" . enlarge-window-horizontally)
  ("C-M-<down>"  . shrink-window)
  ("C-M-<up>"    . enlarge-window)
  ("M-o"         . other-window)
  ("C-<tab>"     . indent-relative)
  ("<f5>"        . compile)
  ("C-<f5>"      . recompile)
  ("<C-f9>"      . set-frame-font)
  ("C-x C-b"     . ibuffer)
  ("M-j"         . (lambda () (interactive) (join-line -1)))
  :config
  ;; Text mode is initial mode
  (setq initial-major-mode 'text-mode)

  ;; Text mode is default major mode
  (setq default-major-mode 'text-mode)

  ;; Moderate font lock
  (setq font-lock-maximum-decoration t)
  
  ;; No cursor in inactive windows
  (setq cursor-in-non-selected-windows nil)

  ;; Fill column at 80
  (setq fill-column 80)

  ;; Default frame settings
  (setq default-frame-alist
	    (append (list
		         '(min-height . 1)  '(height . 45)
		         '(min-width  . 1)  '(width  . 81)
		         '(vertical-scroll-bars . nil)
		         '(internal-border-width . 24)
		         '(left-fringe . 0)
		         '(right-fringe . 0)
		         '(tool-bar-lines . 0)
		         '(menu-bar-lines . 0))))

  ;; Line spacing (in pixels)
  (setq line-spacing 0)

  ;; Save emacs history across restarts
  (savehist-mode)
  ;; (add-to-list 'tramp-default-proxies-alist (quote ((".*" "\\`root\\'" "/ssh:%h:"))))

  ;; Vertical window divider
  (setq window-divider-default-right-width 2)
  (setq window-divider-default-bottom-width 2)
  (setq window-divider-default-places t)

  :hook (after-init . window-divider-mode))
#+END_SRC

* Base Package Settings
In this section we modify some base emacs packages and functionality of emacs
** Eldoc
#+begin_src emacs-lisp
(use-package eldoc
  :straight (:type built-in)
  :config
  (global-eldoc-mode 1))
#+end_src

** Re-builder
Emacs's built-in regex builder. Invoking this in a buffer allows you to match
regexes against it, very useful.
#+BEGIN_SRC emacs-lisp
(use-package re-builder
  :straight (:type built-in)
  :config
  (setq reb-re-syntax 'string))
#+END_SRC

** Flymake
Flymake is a built-in linter. It shows errors/warnings and diagnostics when
enabled.
#+BEGIN_SRC emacs-lisp
(use-package flymake
  :straight (:type built-in)
  :bind (:map flymake-mode-map
              ("C-c ! s" . flymake-start)
              ("C-c ! d" . flymake-show-diagnostics-buffer)
              ("C-c ! n" . flymake-goto-next-error)
              ("C-c ! p" . flymake-goto-prev-error))
  :hook
  (emacs-lisp-mode . flymake-mode)
  :config
  (setq flymake-no-changes-timeout nil)
  (setq flymake-start-syntax-check-on-newline nil))
#+END_SRC

** Dired
Various settings for dired for better QoL.
#+BEGIN_SRC emacs-lisp
(setq dired-dwim-target t)
(setq dired-recursive-copies 'always)
(setq dired-recursive-deletes 'always)
#+END_SRC

** Shell/Term
#+begin_src emacs-lisp
(use-package term
  :straight (:type built-in)
  :bind (:map term-raw-map
              ("M-o" . other-window)))
#+end_src

** Winner-mode
Emacs built-in window history. Allows for undoing and redoing window changes.
#+BEGIN_SRC emacs-lisp
(use-package winner
  :straight (:type built-in)
  :bind
  ("C-c w u" . winner-undo)
  ("C-c w r" . winner-redo)
  :hook (after-init . winner-mode))
#+END_SRC

** Org-mode
Org-mode is a markup language similar to markdown but with many more features
and plugins. We configure some basic keybinds for link management and set up the
agenda files. This document is an example of org-mode in action.
#+BEGIN_SRC emacs-lisp
(use-package org
  :straight (:type built-in)
  :bind
  ("C-c o a" . org-agenda)
  ("C-c o c" . org-capture)
  ("C-c o l" . org-store-link)
  :config
  (setq org-agenda-files (quote ("~/notes/")))
  (setq org-todo-keywords
        (quote
         ((sequence "TODO" "PROG" "PAUS" "|" "DONE" "CANC"))))

  (setq org-todo-keyword-faces
        '(("PROG" . "orange") ("PAUS" . "magenta") ("CANC" . "red") ("DONE" . "green")))

  (setq org-default-priority 72)
  (setq org-highest-priority 65)
  (setq org-lowest-priority 90)

  (setq org-src-window-setup 'current-window)
  (setq org-src-fontify-natively t)
  (setq org-src-preserve-indentation t)
  (setq org-src-tab-acts-natively t)
  (setq org-edit-src-content-indentation 0)
  (setq org-list-allow-alphabetical t)
  (setq org-hide-emphasis-markers t))

(use-package org-indent
  :straight (:type built-in)
  :config
  (setq org-startup-indented t))

;; Center text when in org-mode buffers
(defun org-mode-visual-fill ()
  (setq visual-fill-column-width 150
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . org-mode-visual-fill))
#+END_SRC

** Electric
Emacs labels as "electric" any behaviour that involves contextual auto-insertion
of characters. In this case we enable this functionality for brackets,
parentheses and other usual candidates as well as opening two newlines between them.
#+BEGIN_SRC emacs-lisp
(use-package electric
  :straight (:type built-in)
  :config
  (electric-pair-mode 1)
  (electric-indent-mode 1)
  (setq electric-pair-open-newline-between-pairs t))
#+END_SRC

** Show-paren-mode
Highlight matching parentheses and delimiters when the pointer is above them.
#+BEGIN_SRC emacs-lisp
(use-package paren
  :straight (:type built-in)
  :config
  (show-paren-mode 1))
#+END_SRC

** Hippie-expand
Hippie-expand is an alternative to dabbrev which offers dynamic word completion,
or "dynamic abbreviation". We define the set of rules to try on each keypress.
#+BEGIN_SRC emacs-lisp
(use-package hippie-exp
  :straight (:type built-in)
  :bind
  ("M-/" . hippie-expand)
  :config
  (setq hippie-expand-try-functions-list '(try-expand-dabbrev-visible
                                           try-expand-dabbrev
                                           try-expand-dabbrev-all-buffers
                                           try-expand-dabbrev-from-kill
                                           try-complete-file-name-partially
                                           try-complete-file-name
                                           try-expand-all-abbrevs
                                           try-expand-list
                                           try-expand-line
                                           try-expand-dabbrev-from-kill
                                           try-complete-lisp-symbol-partially
                                           try-complete-lisp-symbol)))
#+END_SRC

* Other Package Settings
In this section we install and configure all external packages.
** Tree-sitter
#+begin_src emacs-lisp
(use-package tree-sitter)
(use-package tree-sitter-langs)
#+end_src

** Helpful
#+begin_src emacs-lisp
(use-package helpful
  :bind
  ("C-h f" . #'helpful-callable)
  ("C-h v" . #'helpful-variable)
  ("C-h k" . #'helpful-key))
#+end_src

** Reverse-im
Translates input sequences to english therefore allowing usage of
emacs with other keyboard languages. Configured to work with Greek.
#+begin_src emacs-lisp
(use-package reverse-im
  :custom
  (reverse-im-input-methods '("greek"))
  :config
  (reverse-im-mode t))
#+end_src

** Visual-regexp
Better =query-replace-regexp= with visual indicators to see what's being replaced.
#+begin_src emacs-lisp
(use-package visual-regexp
  :bind
  ("C-c r" . vr/query-replace))
#+end_src

** Avy
Avy is a package that allows us to jump to visible text using a char-based decision tree, similar to vim's =vim-easymotion=.
We bind the most common actions in easy to access keybindings such as =C-;= and =C-M-;= and the other to keys with the =M-g= prefix.
#+BEGIN_SRC emacs-lisp
(use-package avy
  :bind
  ("C-;" . avy-goto-char)
  ("C-M-;" . avy-goto-char-2)
  ("M-g f" . avy-goto-line)
  ("M-g w" . avy-goto-word-1)
  ("M-g e" . avy-goto-word-0))
#+END_SRC

** Xterm-color
A better replacement for ansi-color.el which translates ansi escape sequences to colors in terminal buffers.
#+BEGIN_SRC emacs-lisp
(use-package xterm-color
  :config

  ;; Work with compilation buffers
  (setq compilation-environment '("TERM=xterm-256color"))
  (defun my/advice-compilation-filter (f proc string)
    (funcall f proc (xterm-color-filter string)))
  (advice-add 'compilation-filter :around #'my/advice-compilation-filter)

  ;; Work with eshell buffers

  (add-hook 'eshell-before-prompt-hook
            (lambda ()
              (setq xterm-color-preserve-properties t)))
  
  ;; (add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
  ;;(setq eshell-output-filter-functions (remove 'eshell-handle-ansi-color eshell-output-filter-functions))
  (setenv "TERM" "xterm-256color")

  ;; Compilation buffers support
  (setq compilation-environment '("TERM=xterm-256color"))
  
  (defun my/advice-compilation-filter (f proc string)
    (funcall f proc (xterm-color-filter string)))
  
  (advice-add 'compilation-filter :around #'my/advice-compilation-filter)
  

  ;; Work with shell-mode
  (setq comint-output-filter-functions
        (remove 'ansi-color-process-output comint-output-filter-functions))

  (add-hook 'shell-mode-hook
            (lambda ()
              ;; Disable font-locking in this buffer to improve performance
              (font-lock-mode -1)
              ;; Prevent font-locking from being re-enabled in this buffer
              (make-local-variable 'font-lock-function)
              (setq font-lock-function (lambda (_) nil))
              (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter nil t))))
#+END_SRC

** Vertico
Vertico provides a better completion UI for selecting items from a list. It replaces other packages such as Ido, Helm or Ivy. We enable it globally.
#+BEGIN_SRC emacs-lisp
(use-package vertico
  :straight (:files (:defaults "extensions/*"))
  :init
  (vertico-mode)

  ;; Show 10 candidates
  (setq vertico-count 10)

  ;; Static size for the Vertico minibuffer
  (setq vertico-resize nil)

  ;; Enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+END_SRC

** Orderless
Better sorting/filtering for Emacs.
#+begin_src emacs-lisp
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic substring partial-completion flex)
        completion-category-defaults nil
        completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Consult
Consult provides various practical commands based on Emacs completion. We use it with =selectrum= to leverage it's various utilities and bind some common commands.
#+BEGIN_SRC emacs-lisp
(use-package consult
  :bind (("M-g g"   . consult-goto-line)
         ("M-g M-g" . consult-goto-line)
         ("M-i"     . consult-imenu)
         ("C-c j"   . consult-git-grep)
         ("C-x l"   . consult-locate)
         ("M-y"     . consult-yank-pop)
         ("C-x r b" . consult-bookmark)
         ("C-x b"   . consult-buffer)
         ("<f9>"    . consult-theme)))
#+end_src

** Embark
#+begin_src emacs-lisp
(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ;; ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Ctrlf
Better buffer text searching. Replaces packages such as =Isearch=, =Swiper= or =Helm-iswoop=.
#+begin_src emacs-lisp
(use-package ctrlf
  :config
  (ctrlf-mode +1))
#+end_src

** Marginalia
Adds annotations at the margin of the minibuffer for completion candidates of selectrum such as files or command descriptions. (i.e pressing =M-x= will show a short description of each command)
#+begin_src emacs-lisp
(use-package marginalia
  :bind (:map minibuffer-local-map
              ("M-A" . marginalia-cycle))
  :init
  (marginalia-mode))
#+end_src

** Affe
Fuzzy finder similar to fzf that displays results in the minibuffer.
#+begin_src emacs-lisp
(use-package affe
  :config
  ;; Manual preview key for `affe-grep'
  (consult-customize affe-grep :preview-key (kbd "M-."))
  :bind
  (("C-c g" . affe-grep)
   ("C-c f" . affe-find)))
#+end_src

** Corfu
A text completion framework for Emacs. Primarily used for programming autocompletion.
#+begin_src emacs-lisp
(use-package company
  :diminish
  :hook((latex-mode      . company-mode)
        (rustic-mode     . company-mode)
        (clojure-mode    . company-mode)
        (elixir-mode     . company-mode)
        (nim-mode        . company-mode)
        (go-mode         . company-mode)
        (typescript-mode . company-mode)
        (c-mode          . company-mode)
        (c++-mode        . company-mode)
        (js2-minor-mode  . company-mode)
        (haskell-mode    . company-mode)
        (php-mode        . company-mode)
        (css-mode        . company-mode)
        (emacs-lisp-mode . company-mode))
  :config
  (setq company-idle-delay 0.1)
  (setq company-minimum-prefix-length 1)
  (setq company-selection-wrap-around t)
  (setq company-tooltip-align-annotations t)
  (setq company-tooltip-limit 10)
  (setq company-dabbrev-downcase nil)

  (company-tng-configure-default))

#+end_src

** Kind-icon
Icons for corfu completions
#+begin_src emacs-lisp
(use-package kind-icon
  :ensure t
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** Flycheck
Syntax checking extension for displaying info about code.
#+begin_src emacs-lisp
(use-package flycheck
  :hook
  (haskell-mode . flycheck-mode)
  (php-mode     . flycheck-mode)
  (nim-mode     . flycheck-mode)
  :config
  (setq flycheck-check-syntax-automatically '(save mode-enabled)))
#+end_src

** Yasnippet
Programming snippet support.
#+begin_src emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :config
  (yas-global-mode)
  :bind
  ("C-'"      . yas-expand))
#+end_src

A collection of various snippets.
#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :after (yasnippet))
#+end_src

** All-The-Icons-Dired
Display icons for files and folders in dired buffers.
#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :hook
  (dired-mode . all-the-icons-dired-mode))
#+end_src

** Magit
Magit is a text-based user interface to git. It supports almost every git task with just a couple of keypresses.
#+begin_src emacs-lisp
(use-package magit
  :bind ("C-x g". magit-status))
#+end_src

** Projectile
Project interaction library for Emacs. Provides a nice set of features for operating on projects.
#+begin_src emacs-lisp
(use-package projectile
  :config
  (setq projectile-tags-backend 'etags-select)
  (add-to-list 'projectile-globally-ignored-modes "org-mode")
  (add-to-list 'projectile-globally-ignored-directories "*.ccls-cache")
  (projectile-mode +1)
  :bind-keymap
  ("C-c p" . projectile-command-map))
#+end_src

** Which-key
Which-key is a keybinding preview utility to show all subsequent keys when waiting for commands.
#+begin_src emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :config

  ;; (which-key-setup-minibuffer)
  (setq which-key-allow-imprecise-window-fit nil)

  ;; Show on the right, otherwise on bottom
  (which-key-setup-side-window-right-bottom)

  ;; Enable which-key
  (which-key-mode t))
#+end_src

** Latest project/xref/eldoc
Use a recent project-el to prevent errors in packages like magit
#+begin_src emacs-lisp
(straight-use-package 'project)
(straight-use-package 'eldoc)
(straight-use-package 'xref)
#+end_src

** LSP
LSP Client for emacs
#+begin_src emacs-lisp

;; (use-package eglot
;;   :hook ((latex-mode      . eglot-ensure)
;;          (c-mode          . eglot-ensure)
;;          (go-mode         . eglot-ensure)
;;          (c++-mode        . eglot-ensure)
;;          (php-mode        . eglot-ensure)
;;          (typescript-mode . eglot-ensure)
;;          (elixir-mode     . eglot-ensure)
;;          (vue-mode        . eglot-ensure)
;;          (js2-minor-mode  . eglot-ensure)
;;          (go-mode         . eglot-ensure)
;;          (eglot-mode      . flymake-mode)))
(use-package lsp-mode
  :init
  ;; Delay for refreshing highlights e.t.c
  (setq lsp-idle-delay 0.500)
  ;; set prefix for lsp-command-keymap
  (setq lsp-keymap-prefix "C-c l")
  :custom
  (lsp-headerline-breadcrumb-mode t)
  (lsp-enable-indentation t)
  ;; (lsp-enable-on-type-formatting nil)
  (lsp-modeline-code-actions-enable t)
  (lsp-modeline-diagnostics-enable t)

  ;; Company completion icons
  (setq company-format-margin-function #'company-vscode-light-icons-margin)
  :hook ((latex-mode      . lsp)
         (c-mode          . lsp)
         (go-mode         . lsp)
         (c++-mode        . lsp)
         (php-mode        . lsp)
         (typescript-mode . lsp)
         (elixir-mode     . lsp)
         (vue-mode        . lsp)
         (js2-minor-mode  . lsp)
         (go-mode         . lsp)
         (lsp-mode        . lsp-enable-which-key-integration)
         (lsp-mode        . lsp-ui-mode))
  :config
  (setq lsp-ui-doc-enable nil)
  (setq lsp-ui-doc-header t)
  (setq lsp-ui-doc-include-signature t)
  ;; (setq lsp-ui-doc-border (face-foreground 'default))
  (setq lsp-ui-sideline-show-code-actions t)
  (setq lsp-ui-sideline-delay 0.05)

  ;; project errors on modeline
  (with-eval-after-load 'lsp-mode
    ;; :global/:workspace/:file
    (setq lsp-modeline-diagnostics-scope :workspace))

  :commands lsp)

(use-package lsp-ui
  :commands lsp-ui-mode)

(use-package lsp-treemacs
  :commands lsp-treemacs-errors-list)
#+end_src

** Iedit
Edit multiple regions simultaneously in a buffer or a region.
#+begin_src emacs-lisp
(use-package iedit
  :bind ("C-c i" . iedit-mode))
#+end_src

** Dockerfile
#+begin_src emacs-lisp
(use-package dockerfile-mode)
#+end_src

** Org Bullets
Display org-mode headings as utf-8 bullets.
#+begin_src emacs-lisp
(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :config
  (setq org-bullets-bullet-list (quote ("◉" "◆" "✚" "☀" "○")))
  (setq inhibit-compacting-font-caches t))
#+end_src

** Latex
Configure basic options for latex
#+begin_src emacs-lisp
(use-package tex
  :straight (:type built-in)
  :requires (auctex)
  :config
  (setq tex-auto-save t)
  (setq tex-engine 'lualatex)
  (setq tex-parse-self t))
#+end_src

** Emmet
Offers snippets for html and css
#+begin_src emacs-lisp
(use-package emmet-mode
  :hook ((sgml-mode . emmet-mode)
         (css-mode . emmet-mode))
  :config
  (setq emmet-move-cursor-between-quotes t))
#+end_src

** Treemacs
A tree layout file explorer similar to Vim's Nerdtree.
#+begin_src emacs-lisp
(use-package treemacs
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "m-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         t
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-move-forward-on-expand        nil
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-user-mode-line-format         nil
          treemacs-width                         35)
    ;; the default width and height of the icons is 22 pixels. if you are
    ;; using a hi-dpi display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-tag-follow-mode t)
    (treemacs-project-follow-mode t)
    (treemacs-filewatch-mode t)
    ;; (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t b"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-projectile
  :after treemacs projectile)

(use-package treemacs-icons-dired
  :after treemacs dired)
;; :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit)
#+end_src

** Paredit
Structural editing for lisps.
#+begin_src emacs-lisp
(use-package paredit
  :hook
  (clojure-mode    . paredit-mode)
  (emacs-lisp-mode . paredit-mode)
  :bind (:map paredit-mode-map
              ("M-[" . paredit-wrap-square)))
#+end_src

** Aggressive-Indent-Mode
Keeps code always indented when typing.
#+begin_src emacs-lisp
(use-package aggressive-indent
  :hook
  (html-mode . aggressive-indent-mode)
  (css-mode  . aggressive-indent-mode)
  (clojure-mode . aggressive-indent-mode))
#+end_src

** Rainbow delimiters
Highlight parentheses, brackets and braces according to their depth.
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters)
#+END_SRC

** LANGUAGES
Common packages for a couple of programming languages
#+begin_src emacs-lisp
;; ZIG
(use-package zig-mode
  :config
  (setq zig-format-show-buffer nil
        zig-format-on-save nil))


;; HTML
(use-package sgml-mode
  :straight (:type built-in)
  :config
  (setq sgml-basic-offset 2))

;; RUST
(use-package rustic
  :defer t
  :config
  (setq rustic-lsp-server 'rust-analyzer)
  (setq rustic-lsp-client 'eglot)
  (setq rustic-format-on-save nil))

;; CLOJURE
(use-package cider
  :bind (:map cider-repl-mode-map
              ("C-c C-k" . cider-repl-clear-buffer)))

(use-package clojure-mode
  :hook
  (clojure-mode . rainbow-delimiters-mode))

;; ELIXIR
(use-package elixir-mode
  :hook
  (elixir-mode . mix-minor-mode)
  :bind (:map elixir-mode-map
              ("C-c C-f" . elixir-format)))

(use-package mix
  :hook
  (elixir-mode . mix-minor-mode))

(use-package exunit
  :hook
  (elixir-mode . exunit-mode))

;; YAML
(use-package yaml-mode)

;; NIM
(use-package nim-mode
  :hook
  (nim-mode . nimsuggest-mode))

;; LUA
(use-package lua-mode)

;; TYPESCRIPT
(use-package typescript-mode
  :defer t)

;; C
(use-package cc-mode
  :defer t
  :config
  (setq-default c-basic-offset 4)
  (setq-default c-default-style "bsd"))

;; JAVASCRIPT
(use-package js2-mode
  :hook
  (js-mode . subword-mode)
  (js-mode . js2-minor-mode))

;; CSS
(use-package css-mode
  :defer t)

;; ELISP
(use-package elisp-mode
  :straight (:type built-in)
  :bind (:map emacs-lisp-mode-map
              ("C-c C-k" . eval-buffer)))

;; VUEJS
(use-package vue-mode
  :mode "\\.vue\\'")

;; GO
(use-package go-mode)
(use-package gotest
  :bind (:map go-mode-map
              ("C-c C-c t" . go-test-current-project)
              ("C-c C-c b" . go-test-current-project-benchmarks))
  :config
  (setq go-test-verbose t))
(use-package go-eldoc
  :hook (go-mode . go-eldoc-setup))

(use-package svelte-mode
    :defer t)
#+end_src

** Themes
Kaolin themes: A set of eye pleasing themes for emacs
#+BEGIN_SRC emacs-lisp
(use-package kaolin-themes
  :config
  (load-theme 'kaolin-dark t)
  (kaolin-treemacs-theme))
#+END_SRC

** Nano-modeline
#+begin_src emacs-lisp
(use-package nano-modeline
  :config
  (setq nano-modeline-position "Bottom")
  (nano-modeline-mode 1))
#+end_src

** GCMH
Enforce a sneaky GC strategy to minimize GC interference with user activity
#+begin_src emacs-lisp
(use-package gcmh
  :config
  (gcmh-mode 1)
  (setq gcmh-idle-delay 5)                          ; default is 15s
  (setq gcmh-high-cons-threshold (* 16 1024 1024))) ; 16mb
#+end_src

* Custom
Display emacs startup time
#+BEGIN_SRC emacs-lisp
(defun display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                    (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'display-startup-time)
#+END_SRC
